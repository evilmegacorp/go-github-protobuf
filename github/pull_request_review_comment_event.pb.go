// Code generated by protoc-gen-gogo.
// source: pull_request_review_comment_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PullRequestReviewCommentLink struct {
	Html string `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"`
}

func (m *PullRequestReviewCommentLink) Reset()         { *m = PullRequestReviewCommentLink{} }
func (m *PullRequestReviewCommentLink) String() string { return proto.CompactTextString(m) }
func (*PullRequestReviewCommentLink) ProtoMessage()    {}
func (*PullRequestReviewCommentLink) Descriptor() ([]byte, []int) {
	return fileDescriptorPullRequestReviewCommentEvent, []int{0}
}

type PullRequestReviewCommentLinks struct {
	Self        *PullRequestReviewCommentLink `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Html        *PullRequestReviewCommentLink `protobuf:"bytes,2,opt,name=html" json:"html,omitempty"`
	PullRequest *PullRequestReviewCommentLink `protobuf:"bytes,3,opt,name=pull_request,json=pullRequest" json:"pull_request,omitempty"`
}

func (m *PullRequestReviewCommentLinks) Reset()         { *m = PullRequestReviewCommentLinks{} }
func (m *PullRequestReviewCommentLinks) String() string { return proto.CompactTextString(m) }
func (*PullRequestReviewCommentLinks) ProtoMessage()    {}
func (*PullRequestReviewCommentLinks) Descriptor() ([]byte, []int) {
	return fileDescriptorPullRequestReviewCommentEvent, []int{1}
}

type PullRequestReviewComment struct {
	Url              string                         `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id               int32                          `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	DiffHunk         string                         `protobuf:"bytes,3,opt,name=diff_hunk,json=diffHunk,proto3" json:"diff_hunk,omitempty"`
	Path             string                         `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Position         int32                          `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	OriginalPosition int32                          `protobuf:"varint,6,opt,name=original_position,json=originalPosition,proto3" json:"original_position,omitempty"`
	CommitId         string                         `protobuf:"bytes,7,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	OriginalCommitId string                         `protobuf:"bytes,8,opt,name=original_commit_id,json=originalCommitId,proto3" json:"original_commit_id,omitempty"`
	User             *User                          `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	Body             string                         `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	CreatedAt        string                         `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        string                         `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	HtmlUrl          string                         `protobuf:"bytes,13,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	PullRequestUrl   string                         `protobuf:"bytes,14,opt,name=pull_request_url,json=pullRequestUrl,proto3" json:"pull_request_url,omitempty"`
	XLinks           *PullRequestReviewCommentLinks `protobuf:"bytes,15,opt,name=_links,json=Links" json:"_links,omitempty"`
}

func (m *PullRequestReviewComment) Reset()         { *m = PullRequestReviewComment{} }
func (m *PullRequestReviewComment) String() string { return proto.CompactTextString(m) }
func (*PullRequestReviewComment) ProtoMessage()    {}
func (*PullRequestReviewComment) Descriptor() ([]byte, []int) {
	return fileDescriptorPullRequestReviewCommentEvent, []int{2}
}

type PullRequestReviewCommentEvent struct {
	Action       string                    `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Comment      *PullRequestReviewComment `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	PullRequest  *PullRequest              `protobuf:"bytes,3,opt,name=pull_request,json=pullRequest" json:"pull_request,omitempty"`
	Repository   *Repository               `protobuf:"bytes,4,opt,name=repository" json:"repository,omitempty"`
	Sender       *User                     `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
	Installation *Installation             `protobuf:"bytes,6,opt,name=installation" json:"installation,omitempty"`
	Organization *User                     `protobuf:"bytes,7,opt,name=organization" json:"organization,omitempty"`
}

func (m *PullRequestReviewCommentEvent) Reset()         { *m = PullRequestReviewCommentEvent{} }
func (m *PullRequestReviewCommentEvent) String() string { return proto.CompactTextString(m) }
func (*PullRequestReviewCommentEvent) ProtoMessage()    {}
func (*PullRequestReviewCommentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorPullRequestReviewCommentEvent, []int{3}
}

func init() {
	proto.RegisterType((*PullRequestReviewCommentLink)(nil), "github.PullRequestReviewCommentLink")
	proto.RegisterType((*PullRequestReviewCommentLinks)(nil), "github.PullRequestReviewCommentLinks")
	proto.RegisterType((*PullRequestReviewComment)(nil), "github.PullRequestReviewComment")
	proto.RegisterType((*PullRequestReviewCommentEvent)(nil), "github.PullRequestReviewCommentEvent")
}
func (m *PullRequestReviewCommentLink) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PullRequestReviewCommentLink) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Html) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.Html)))
		i += copy(data[i:], m.Html)
	}
	return i, nil
}

func (m *PullRequestReviewCommentLinks) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PullRequestReviewCommentLinks) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Self.Size()))
		n1, err := m.Self.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Html != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Html.Size()))
		n2, err := m.Html.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PullRequest != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.PullRequest.Size()))
		n3, err := m.PullRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PullRequestReviewComment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PullRequestReviewComment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	if m.Id != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Id))
	}
	if len(m.DiffHunk) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.DiffHunk)))
		i += copy(data[i:], m.DiffHunk)
	}
	if len(m.Path) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if m.Position != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Position))
	}
	if m.OriginalPosition != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.OriginalPosition))
	}
	if len(m.CommitId) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.CommitId)))
		i += copy(data[i:], m.CommitId)
	}
	if len(m.OriginalCommitId) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.OriginalCommitId)))
		i += copy(data[i:], m.OriginalCommitId)
	}
	if m.User != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.User.Size()))
		n4, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Body) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.CreatedAt) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.CreatedAt)))
		i += copy(data[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.UpdatedAt)))
		i += copy(data[i:], m.UpdatedAt)
	}
	if len(m.HtmlUrl) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.HtmlUrl)))
		i += copy(data[i:], m.HtmlUrl)
	}
	if len(m.PullRequestUrl) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.PullRequestUrl)))
		i += copy(data[i:], m.PullRequestUrl)
	}
	if m.XLinks != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.XLinks.Size()))
		n5, err := m.XLinks.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PullRequestReviewCommentEvent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PullRequestReviewCommentEvent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(len(m.Action)))
		i += copy(data[i:], m.Action)
	}
	if m.Comment != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Comment.Size()))
		n6, err := m.Comment.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PullRequest != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.PullRequest.Size()))
		n7, err := m.PullRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Repository != nil {
		data[i] = 0x22
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Repository.Size()))
		n8, err := m.Repository.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Sender != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Sender.Size()))
		n9, err := m.Sender.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Installation != nil {
		data[i] = 0x32
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Installation.Size()))
		n10, err := m.Installation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Organization != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintPullRequestReviewCommentEvent(data, i, uint64(m.Organization.Size()))
		n11, err := m.Organization.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func encodeFixed64PullRequestReviewCommentEvent(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PullRequestReviewCommentEvent(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPullRequestReviewCommentEvent(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PullRequestReviewCommentLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.Html)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	return n
}

func (m *PullRequestReviewCommentLinks) Size() (n int) {
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Html != nil {
		l = m.Html.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.PullRequest != nil {
		l = m.PullRequest.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	return n
}

func (m *PullRequestReviewComment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPullRequestReviewCommentEvent(uint64(m.Id))
	}
	l = len(m.DiffHunk)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovPullRequestReviewCommentEvent(uint64(m.Position))
	}
	if m.OriginalPosition != 0 {
		n += 1 + sovPullRequestReviewCommentEvent(uint64(m.OriginalPosition))
	}
	l = len(m.CommitId)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.OriginalCommitId)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	l = len(m.PullRequestUrl)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.XLinks != nil {
		l = m.XLinks.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	return n
}

func (m *PullRequestReviewCommentEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.PullRequest != nil {
		l = m.PullRequest.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovPullRequestReviewCommentEvent(uint64(l))
	}
	return n
}

func sovPullRequestReviewCommentEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPullRequestReviewCommentEvent(x uint64) (n int) {
	return sovPullRequestReviewCommentEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullRequestReviewCommentLink) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequestReviewCommentEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestReviewCommentLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestReviewCommentLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Html", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Html = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequestReviewCommentEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequestReviewCommentLinks) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequestReviewCommentEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestReviewCommentLinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestReviewCommentLinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &PullRequestReviewCommentLink{}
			}
			if err := m.Self.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Html", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Html == nil {
				m.Html = &PullRequestReviewCommentLink{}
			}
			if err := m.Html.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PullRequest == nil {
				m.PullRequest = &PullRequestReviewCommentLink{}
			}
			if err := m.PullRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequestReviewCommentEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequestReviewComment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequestReviewCommentEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestReviewComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestReviewComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffHunk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiffHunk = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPosition", wireType)
			}
			m.OriginalPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OriginalPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalCommitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalCommitId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullRequestUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XLinks == nil {
				m.XLinks = &PullRequestReviewCommentLinks{}
			}
			if err := m.XLinks.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequestReviewCommentEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequestReviewCommentEvent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequestReviewCommentEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestReviewCommentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestReviewCommentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &PullRequestReviewComment{}
			}
			if err := m.Comment.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PullRequest == nil {
				m.PullRequest = &PullRequest{}
			}
			if err := m.PullRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &User{}
			}
			if err := m.Organization.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequestReviewCommentEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullRequestReviewCommentEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPullRequestReviewCommentEvent(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPullRequestReviewCommentEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequestReviewCommentEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPullRequestReviewCommentEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPullRequestReviewCommentEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPullRequestReviewCommentEvent(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPullRequestReviewCommentEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPullRequestReviewCommentEvent   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pull_request_review_comment_event.proto", fileDescriptorPullRequestReviewCommentEvent)
}

var fileDescriptorPullRequestReviewCommentEvent = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x6e, 0x9a, 0xc4, 0x49, 0x26, 0x21, 0x84, 0xa1, 0x42, 0x26, 0xd0, 0x28, 0x8a, 0x8a, 0xa8,
	0x04, 0xa4, 0x28, 0x48, 0x08, 0x21, 0x2e, 0x50, 0x21, 0xa8, 0xc4, 0xa1, 0x5a, 0xa9, 0x67, 0xcb,
	0x89, 0x9d, 0x64, 0x55, 0xc7, 0x6b, 0xec, 0x75, 0x51, 0x79, 0x12, 0x1e, 0xa9, 0x47, 0x1e, 0x80,
	0x03, 0x3f, 0x4f, 0xc0, 0x8d, 0x23, 0xbb, 0xb3, 0x76, 0xe2, 0x48, 0x69, 0xa1, 0x87, 0x64, 0x67,
	0xe7, 0xfb, 0xbe, 0x9d, 0xd9, 0x99, 0x59, 0xc3, 0xc3, 0x28, 0x0d, 0x02, 0x27, 0xf6, 0x3f, 0xa6,
	0x7e, 0x22, 0xd5, 0x7a, 0xc6, 0xfd, 0x4f, 0xce, 0x44, 0x2c, 0x16, 0x7e, 0x28, 0x1d, 0xff, 0x4c,
	0xfd, 0x0f, 0xa3, 0x58, 0x48, 0x81, 0xd6, 0x8c, 0xcb, 0x79, 0x3a, 0xee, 0x3e, 0x31, 0xeb, 0x50,
	0x71, 0x0e, 0x66, 0x62, 0x26, 0x0e, 0x08, 0x1e, 0xa7, 0x53, 0xda, 0xd1, 0x86, 0x2c, 0x23, 0xeb,
	0x42, 0x9a, 0xf8, 0x71, 0x66, 0x77, 0x62, 0x3f, 0x12, 0x09, 0x97, 0x22, 0x3e, 0xcf, 0x3c, 0x58,
	0x8c, 0x9e, 0xfb, 0x78, 0x98, 0x48, 0x37, 0x08, 0x5c, 0xc9, 0x45, 0x68, 0x7c, 0x83, 0x11, 0xdc,
	0x3f, 0x56, 0x4c, 0x66, 0x88, 0x8c, 0xb2, 0x3c, 0x34, 0x49, 0x7e, 0xe0, 0xe1, 0x29, 0x22, 0x54,
	0xe6, 0x72, 0x11, 0xd8, 0xa5, 0x7e, 0x69, 0xbf, 0xc1, 0xc8, 0x1e, 0x7c, 0x2b, 0xc1, 0xee, 0x55,
	0xa2, 0x04, 0x5f, 0x40, 0x25, 0xf1, 0x83, 0x29, 0xa9, 0x9a, 0xa3, 0xbd, 0x61, 0x76, 0xb3, 0xab,
	0x44, 0x8c, 0x14, 0x5a, 0x49, 0xf1, 0xb6, 0xaf, 0xa3, 0xd4, 0x0a, 0x7c, 0x07, 0xad, 0xe2, 0x9d,
	0xed, 0xf2, 0x35, 0x4e, 0x68, 0x46, 0x2b, 0x74, 0xf0, 0xa7, 0x0c, 0xf6, 0x65, 0x6c, 0xec, 0x40,
	0x39, 0x8d, 0xf3, 0x72, 0x68, 0x13, 0xdb, 0xb0, 0xcd, 0x3d, 0xca, 0xb7, 0xca, 0x94, 0x85, 0xf7,
	0xa0, 0xe1, 0xf1, 0xe9, 0xd4, 0x99, 0xa7, 0xe1, 0x29, 0x25, 0xd1, 0x60, 0x75, 0xed, 0x78, 0x9f,
	0x9a, 0x72, 0x46, 0xae, 0x9c, 0xdb, 0x15, 0x53, 0x4e, 0x6d, 0x63, 0x17, 0xea, 0xd4, 0x3c, 0xd5,
	0x14, 0xbb, 0x4a, 0xc7, 0x2c, 0xf7, 0xf8, 0x08, 0x6e, 0x89, 0x98, 0xcf, 0x78, 0xe8, 0x06, 0xce,
	0x92, 0x64, 0x11, 0xa9, 0x93, 0x03, 0xc7, 0x39, 0x59, 0x45, 0xd6, 0xf3, 0xc5, 0xa5, 0xa3, 0x12,
	0xaa, 0x99, 0xc8, 0xc6, 0x71, 0xe4, 0xe1, 0x63, 0xc0, 0xe5, 0x49, 0x2b, 0x56, 0x9d, 0x58, 0xcb,
	0xa3, 0x0e, 0x73, 0x76, 0x1f, 0x2a, 0x7a, 0xbc, 0xec, 0x06, 0x15, 0xb1, 0x95, 0x17, 0xf1, 0x44,
	0xf9, 0x18, 0x21, 0xfa, 0x26, 0x63, 0xe1, 0x9d, 0xdb, 0x60, 0x6e, 0xa2, 0x6d, 0xdc, 0x05, 0x98,
	0xc4, 0xbe, 0x2b, 0x7d, 0xcf, 0x71, 0xa5, 0xdd, 0x24, 0xa4, 0x91, 0x79, 0x5e, 0x4b, 0x0d, 0xa7,
	0x91, 0x97, 0xc3, 0x2d, 0x03, 0x67, 0x1e, 0x05, 0xdf, 0x85, 0xba, 0x6e, 0xa4, 0xa3, 0xeb, 0x7b,
	0x83, 0xc0, 0x9a, 0xde, 0x9f, 0xa8, 0x1a, 0xef, 0x43, 0x67, 0xed, 0x35, 0x69, 0x4a, 0x9b, 0x28,
	0xed, 0x42, 0xe7, 0x34, 0xf3, 0x15, 0x58, 0x4e, 0xa0, 0x67, 0xd0, 0xbe, 0x49, 0xa9, 0x3f, 0xf8,
	0x9f, 0xfe, 0x27, 0xac, 0x4a, 0xcb, 0xe0, 0xf7, 0xf6, 0xe5, 0x93, 0xfd, 0x56, 0x3f, 0x59, 0xbc,
	0x03, 0x96, 0x3b, 0xa1, 0x2e, 0x98, 0x11, 0xc8, 0x76, 0xf8, 0x12, 0x6a, 0xd9, 0xdb, 0xce, 0x46,
	0xb7, 0xff, 0xaf, 0xc0, 0x2c, 0x17, 0xe0, 0xf3, 0x8d, 0x93, 0x7b, 0x7b, 0xd3, 0x01, 0xc5, 0x41,
	0xc5, 0x11, 0xc0, 0xea, 0xdd, 0xd3, 0x48, 0x35, 0x47, 0x98, 0xab, 0xd8, 0x12, 0x61, 0x05, 0x16,
	0xee, 0x81, 0x95, 0xf8, 0xa1, 0xa7, 0x5a, 0x5b, 0xdd, 0xd0, 0xda, 0x0c, 0x53, 0xaf, 0xb0, 0x55,
	0xfc, 0x56, 0xd0, 0xc4, 0x35, 0x47, 0x3b, 0x39, 0xf7, 0xa8, 0x80, 0xb1, 0x35, 0x26, 0x3e, 0x85,
	0x96, 0x88, 0x67, 0x6e, 0xc8, 0x3f, 0x1b, 0x65, 0x6d, 0x43, 0x94, 0x35, 0xc6, 0x9b, 0x9d, 0x8b,
	0x1f, 0xbd, 0xad, 0x8b, 0x9f, 0xbd, 0xd2, 0x57, 0xf5, 0xfb, 0xae, 0x7e, 0x5f, 0x7e, 0xf5, 0xb6,
	0xc6, 0x16, 0x7d, 0x9e, 0x9e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x67, 0xb7, 0x2c, 0x46,
	0x05, 0x00, 0x00,
}
