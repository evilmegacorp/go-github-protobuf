// Code generated by protoc-gen-gogo.
// source: deployment.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Deployment struct {
	Url           string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id            int32             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Sha           string            `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Ref           string            `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	Task          string            `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	Payload       map[string]string `protobuf:"bytes,6,rep,name=payload" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Environment   string            `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	Description   string            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Creator       *User             `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	CreatedAt     string            `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string            `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	StatusesUrl   string            `protobuf:"bytes,12,opt,name=statuses_url,json=statusesUrl,proto3" json:"statuses_url,omitempty"`
	RepositoryUrl string            `protobuf:"bytes,13,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptorDeployment, []int{0} }

func init() {
	proto.RegisterType((*Deployment)(nil), "github.Deployment")
}
func (m *Deployment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Deployment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	if m.Id != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintDeployment(data, i, uint64(m.Id))
	}
	if len(m.Sha) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.Sha)))
		i += copy(data[i:], m.Sha)
	}
	if len(m.Ref) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.Ref)))
		i += copy(data[i:], m.Ref)
	}
	if len(m.Task) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.Task)))
		i += copy(data[i:], m.Task)
	}
	if len(m.Payload) > 0 {
		for k, _ := range m.Payload {
			data[i] = 0x32
			i++
			v := m.Payload[k]
			mapSize := 1 + len(k) + sovDeployment(uint64(len(k))) + 1 + len(v) + sovDeployment(uint64(len(v)))
			i = encodeVarintDeployment(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintDeployment(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintDeployment(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Environment) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.Environment)))
		i += copy(data[i:], m.Environment)
	}
	if len(m.Description) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.Creator != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintDeployment(data, i, uint64(m.Creator.Size()))
		n1, err := m.Creator.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.CreatedAt) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.CreatedAt)))
		i += copy(data[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.UpdatedAt)))
		i += copy(data[i:], m.UpdatedAt)
	}
	if len(m.StatusesUrl) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.StatusesUrl)))
		i += copy(data[i:], m.StatusesUrl)
	}
	if len(m.RepositoryUrl) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintDeployment(data, i, uint64(len(m.RepositoryUrl)))
		i += copy(data[i:], m.RepositoryUrl)
	}
	return i, nil
}

func encodeFixed64Deployment(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Deployment(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDeployment(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Deployment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDeployment(uint64(m.Id))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.Task)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if len(m.Payload) > 0 {
		for k, v := range m.Payload {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDeployment(uint64(len(k))) + 1 + len(v) + sovDeployment(uint64(len(v)))
			n += mapEntrySize + 1 + sovDeployment(uint64(mapEntrySize))
		}
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.StatusesUrl)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	l = len(m.RepositoryUrl)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	return n
}

func sovDeployment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeployment(x uint64) (n int) {
	return sovDeployment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deployment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDeployment
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Payload == nil {
				m.Payload = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeployment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeployment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthDeployment
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Payload[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Payload[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &User{}
			}
			if err := m.Creator.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusesUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeployment(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeployment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeployment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeployment(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeployment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeployment   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("deployment.proto", fileDescriptorDeployment) }

var fileDescriptorDeployment = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x51, 0xcb, 0x6e, 0xe2, 0x40,
	0x10, 0xc4, 0x98, 0xc7, 0xba, 0x6d, 0x10, 0x1a, 0x71, 0x18, 0x21, 0x2d, 0xcb, 0xae, 0xb4, 0x11,
	0x97, 0x18, 0x89, 0x5c, 0x12, 0x6e, 0x89, 0x92, 0x7b, 0x64, 0x89, 0x33, 0x1a, 0xf0, 0x00, 0x16,
	0xc6, 0x63, 0xcd, 0x8c, 0x91, 0xfc, 0x27, 0xf9, 0x24, 0x8e, 0xc9, 0x1f, 0xe4, 0xf1, 0x23, 0x99,
	0x07, 0x0e, 0x1c, 0x46, 0xae, 0xae, 0x2a, 0x77, 0xb7, 0xaa, 0xa1, 0x17, 0xd3, 0x3c, 0x65, 0xe5,
	0x9e, 0x66, 0x32, 0xcc, 0x39, 0x93, 0x0c, 0xb5, 0x36, 0x89, 0xdc, 0x16, 0xcb, 0xc1, 0xb5, 0xfd,
	0x86, 0x2b, 0xb6, 0x9f, 0x6c, 0xd8, 0x86, 0x4d, 0x8c, 0xbc, 0x2c, 0xd6, 0xa6, 0x32, 0x85, 0x41,
	0xf6, 0xb7, 0x01, 0x14, 0x82, 0x72, 0x8b, 0xff, 0xbd, 0xb9, 0x00, 0x8f, 0x3f, 0x7d, 0x51, 0x0f,
	0xdc, 0x82, 0xa7, 0xd8, 0x19, 0x39, 0x63, 0x2f, 0xd2, 0x10, 0x75, 0xa1, 0x9e, 0xc4, 0xb8, 0xae,
	0x88, 0x66, 0xa4, 0x90, 0x76, 0x88, 0x2d, 0xc1, 0xae, 0x75, 0x28, 0xa8, 0x19, 0x4e, 0xd7, 0xb8,
	0x61, 0x19, 0x05, 0x11, 0x82, 0x86, 0x24, 0x62, 0x87, 0x9b, 0x86, 0x32, 0x18, 0xdd, 0x41, 0x3b,
	0x27, 0x65, 0xca, 0x48, 0x8c, 0x5b, 0x23, 0x77, 0xec, 0x4f, 0xff, 0x84, 0xa7, 0xad, 0xcf, 0xe3,
	0xc3, 0x67, 0xeb, 0x78, 0xca, 0x24, 0x2f, 0xa3, 0xca, 0x8f, 0x46, 0xe0, 0xd3, 0xec, 0x90, 0x70,
	0x96, 0x69, 0x13, 0x6e, 0x9b, 0xae, 0x97, 0x94, 0x76, 0xc4, 0x54, 0xac, 0x78, 0x92, 0xcb, 0x84,
	0x65, 0xf8, 0x97, 0x75, 0x5c, 0x50, 0xe8, 0x0a, 0xda, 0x2b, 0x4e, 0x89, 0x64, 0x1c, 0x7b, 0x4a,
	0xf5, 0xa7, 0x41, 0x35, 0x7e, 0xae, 0xc2, 0x88, 0x2a, 0x11, 0xfd, 0x06, 0x30, 0x90, 0xc6, 0x0b,
	0x22, 0x31, 0x98, 0x46, 0xde, 0x89, 0xb9, 0x97, 0x5a, 0x2e, 0xf2, 0xb8, 0x92, 0x7d, 0x2b, 0x9f,
	0x18, 0x25, 0xff, 0x85, 0x40, 0x48, 0x22, 0x55, 0xbe, 0x62, 0xa1, 0x73, 0x0c, 0xec, 0x22, 0x15,
	0x37, 0x57, 0x79, 0xfe, 0x87, 0x2e, 0xa7, 0x39, 0x13, 0x89, 0x9a, 0x56, 0x1a, 0x53, 0xc7, 0x98,
	0x3a, 0x67, 0x56, 0xd9, 0x06, 0x33, 0x08, 0x2e, 0xc3, 0xd0, 0x21, 0xef, 0x68, 0x59, 0x1d, 0x46,
	0x41, 0xd4, 0x87, 0xe6, 0x81, 0xa4, 0x05, 0x35, 0xb7, 0xf1, 0x22, 0x5b, 0xcc, 0xea, 0xb7, 0xce,
	0x43, 0xff, 0xf8, 0x31, 0xac, 0x1d, 0x3f, 0x87, 0xce, 0xab, 0x7a, 0xef, 0xea, 0xbd, 0x7c, 0x0d,
	0x6b, 0xcb, 0x96, 0x39, 0xf8, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xbd, 0xbf, 0xef,
	0x47, 0x02, 0x00, 0x00,
}
