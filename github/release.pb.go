// Code generated by protoc-gen-gogo.
// source: release.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Asset struct {
	Url                string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	BrowserDownloadUrl string `protobuf:"bytes,2,opt,name=browser_download_url,json=browserDownloadUrl,proto3" json:"browser_download_url,omitempty"`
	Id                 int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Name               string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Label              string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	State              string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	ContentType        string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	FileSize           int32  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	DownloadCount      int32  `protobuf:"varint,9,opt,name=download_count,json=downloadCount,proto3" json:"download_count,omitempty"`
	CreatedAt          string `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Uploader           *User  `protobuf:"bytes,12,opt,name=uploader" json:"uploader,omitempty"`
}

func (m *Asset) Reset()                    { *m = Asset{} }
func (m *Asset) String() string            { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()               {}
func (*Asset) Descriptor() ([]byte, []int) { return fileDescriptorRelease, []int{0} }

type Release struct {
	Url             string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl         string   `protobuf:"bytes,2,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	AssetsUrl       string   `protobuf:"bytes,3,opt,name=assets_url,json=assetsUrl,proto3" json:"assets_url,omitempty"`
	UploadUrl       string   `protobuf:"bytes,4,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	TarballUrl      string   `protobuf:"bytes,5,opt,name=tarball_url,json=tarballUrl,proto3" json:"tarball_url,omitempty"`
	ZipballUrl      string   `protobuf:"bytes,6,opt,name=zipball_url,json=zipballUrl,proto3" json:"zipball_url,omitempty"`
	Id              int32    `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	TagName         string   `protobuf:"bytes,8,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	TargetCommitish string   `protobuf:"bytes,9,opt,name=target_commitish,json=targetCommitish,proto3" json:"target_commitish,omitempty"`
	Name            string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Body            string   `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
	Draft           bool     `protobuf:"varint,12,opt,name=draft,proto3" json:"draft,omitempty"`
	Prerelease      bool     `protobuf:"varint,13,opt,name=prerelease,proto3" json:"prerelease,omitempty"`
	CreatedAt       string   `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PublishedAt     string   `protobuf:"bytes,15,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Author          *User    `protobuf:"bytes,16,opt,name=author" json:"author,omitempty"`
	Assets          []*Asset `protobuf:"bytes,17,rep,name=assets" json:"assets,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptorRelease, []int{1} }

func init() {
	proto.RegisterType((*Asset)(nil), "github.Asset")
	proto.RegisterType((*Release)(nil), "github.Release")
}
func (m *Asset) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Asset) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	if len(m.BrowserDownloadUrl) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.BrowserDownloadUrl)))
		i += copy(data[i:], m.BrowserDownloadUrl)
	}
	if m.Id != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintRelease(data, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Label) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.Label)))
		i += copy(data[i:], m.Label)
	}
	if len(m.State) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if len(m.ContentType) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.ContentType)))
		i += copy(data[i:], m.ContentType)
	}
	if m.FileSize != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintRelease(data, i, uint64(m.FileSize))
	}
	if m.DownloadCount != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintRelease(data, i, uint64(m.DownloadCount))
	}
	if len(m.CreatedAt) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.CreatedAt)))
		i += copy(data[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.UpdatedAt)))
		i += copy(data[i:], m.UpdatedAt)
	}
	if m.Uploader != nil {
		data[i] = 0x62
		i++
		i = encodeVarintRelease(data, i, uint64(m.Uploader.Size()))
		n1, err := m.Uploader.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Release) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Release) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	if len(m.HtmlUrl) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.HtmlUrl)))
		i += copy(data[i:], m.HtmlUrl)
	}
	if len(m.AssetsUrl) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.AssetsUrl)))
		i += copy(data[i:], m.AssetsUrl)
	}
	if len(m.UploadUrl) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.UploadUrl)))
		i += copy(data[i:], m.UploadUrl)
	}
	if len(m.TarballUrl) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.TarballUrl)))
		i += copy(data[i:], m.TarballUrl)
	}
	if len(m.ZipballUrl) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.ZipballUrl)))
		i += copy(data[i:], m.ZipballUrl)
	}
	if m.Id != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintRelease(data, i, uint64(m.Id))
	}
	if len(m.TagName) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.TagName)))
		i += copy(data[i:], m.TagName)
	}
	if len(m.TargetCommitish) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.TargetCommitish)))
		i += copy(data[i:], m.TargetCommitish)
	}
	if len(m.Name) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Body) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if m.Draft {
		data[i] = 0x60
		i++
		if m.Draft {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Prerelease {
		data[i] = 0x68
		i++
		if m.Prerelease {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.CreatedAt) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.CreatedAt)))
		i += copy(data[i:], m.CreatedAt)
	}
	if len(m.PublishedAt) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintRelease(data, i, uint64(len(m.PublishedAt)))
		i += copy(data[i:], m.PublishedAt)
	}
	if m.Author != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintRelease(data, i, uint64(m.Author.Size()))
		n2, err := m.Author.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Assets) > 0 {
		for _, msg := range m.Assets {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			i = encodeVarintRelease(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Release(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Release(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRelease(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Asset) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.BrowserDownloadUrl)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRelease(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovRelease(uint64(m.FileSize))
	}
	if m.DownloadCount != 0 {
		n += 1 + sovRelease(uint64(m.DownloadCount))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	if m.Uploader != nil {
		l = m.Uploader.Size()
		n += 1 + l + sovRelease(uint64(l))
	}
	return n
}

func (m *Release) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.HtmlUrl)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.AssetsUrl)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.UploadUrl)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.TarballUrl)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.ZipballUrl)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRelease(uint64(m.Id))
	}
	l = len(m.TagName)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.TargetCommitish)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	if m.Draft {
		n += 2
	}
	if m.Prerelease {
		n += 2
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	l = len(m.PublishedAt)
	if l > 0 {
		n += 1 + l + sovRelease(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovRelease(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 2 + l + sovRelease(uint64(l))
		}
	}
	return n
}

func sovRelease(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRelease(x uint64) (n int) {
	return sovRelease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrowserDownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrowserDownloadUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FileSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadCount", wireType)
			}
			m.DownloadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DownloadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uploader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uploader == nil {
				m.Uploader = &User{}
			}
			if err := m.Uploader.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelease(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Release) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Release: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Release: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetsUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarballUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TarballUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipballUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipballUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCommitish", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCommitish = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draft = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prerelease", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prerelease = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishedAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelease
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelease(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelease(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRelease
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRelease
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRelease(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRelease = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelease   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("release.proto", fileDescriptorRelease) }

var fileDescriptorRelease = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x6e, 0xfe, 0x9d, 0xc9, 0x4f, 0xc3, 0x2a, 0x87, 0xa5, 0x12, 0x69, 0xa8, 0x40, 0x2a, 0x07,
	0x52, 0x04, 0x4f, 0xd0, 0x16, 0x71, 0xe4, 0x60, 0xe8, 0x39, 0x5a, 0xc7, 0xdb, 0xc4, 0x92, 0xed,
	0xb5, 0xd6, 0x6b, 0x55, 0xed, 0x93, 0xf0, 0x48, 0x3d, 0xf2, 0x04, 0x08, 0xca, 0x03, 0x70, 0xe6,
	0xc6, 0xec, 0xec, 0xda, 0x44, 0x55, 0x0f, 0x96, 0x67, 0xbe, 0x6f, 0x76, 0x67, 0xf4, 0x7d, 0xb3,
	0x30, 0xd1, 0x32, 0x95, 0xa2, 0x94, 0xab, 0x42, 0x2b, 0xa3, 0x58, 0x7f, 0x9b, 0x98, 0x5d, 0x15,
	0x1d, 0xbd, 0x75, 0xff, 0xd5, 0x46, 0x65, 0x67, 0x5b, 0xb5, 0x55, 0x67, 0x44, 0x47, 0xd5, 0x35,
	0x65, 0x94, 0x50, 0xe4, 0x8e, 0x1d, 0x41, 0x55, 0x4a, 0xed, 0xe2, 0x93, 0x3f, 0x6d, 0xe8, 0x9d,
	0x97, 0xa5, 0x34, 0x6c, 0x06, 0x9d, 0x4a, 0xa7, 0xbc, 0xb5, 0x6c, 0x9d, 0x0e, 0x43, 0x1b, 0xb2,
	0x77, 0x30, 0x8f, 0xb4, 0xba, 0xc1, 0xe2, 0x75, 0xac, 0x6e, 0xf2, 0x54, 0x89, 0x78, 0x6d, 0x4b,
	0xda, 0x54, 0xc2, 0x3c, 0xf7, 0xd1, 0x53, 0x57, 0x78, 0x62, 0x0a, 0xed, 0x24, 0xe6, 0x1d, 0xe4,
	0x7b, 0x21, 0x46, 0x8c, 0x41, 0x37, 0x17, 0x99, 0xe4, 0x5d, 0x3a, 0x41, 0x31, 0x9b, 0x43, 0x2f,
	0x15, 0x91, 0x4c, 0x79, 0x8f, 0x40, 0x97, 0x58, 0xb4, 0x34, 0xc2, 0x48, 0xde, 0x77, 0x28, 0x25,
	0xec, 0x25, 0x8c, 0x37, 0x2a, 0x37, 0x32, 0x37, 0x6b, 0x73, 0x5b, 0x48, 0x3e, 0x20, 0x72, 0xe4,
	0xb1, 0xaf, 0x08, 0xb1, 0x25, 0x74, 0xcb, 0xe4, 0x4e, 0xf2, 0xc0, 0x36, 0xbd, 0x18, 0x3f, 0xfc,
	0x38, 0x0e, 0x3e, 0x25, 0xa9, 0xfc, 0x82, 0x58, 0x48, 0x0c, 0x7b, 0x0d, 0xd3, 0x66, 0xfc, 0x8d,
	0xaa, 0x72, 0xc3, 0x87, 0x34, 0xe0, 0xa4, 0x46, 0x2f, 0x2d, 0xc8, 0x5e, 0x00, 0x6c, 0xb4, 0xc4,
	0xae, 0xf1, 0x5a, 0x18, 0x0e, 0xd4, 0x69, 0xe8, 0x91, 0x73, 0xa2, 0xab, 0x22, 0xae, 0xe9, 0x91,
	0xa3, 0x3d, 0x82, 0xf4, 0x29, 0x04, 0x55, 0x61, 0x2f, 0x93, 0x9a, 0x8f, 0x91, 0x1c, 0xbd, 0x1f,
	0xaf, 0xbc, 0x2b, 0x57, 0x28, 0x52, 0xd8, 0xb0, 0x27, 0x7f, 0x3b, 0x30, 0x08, 0x9d, 0x8d, 0x4f,
	0x68, 0xfe, 0x1c, 0x82, 0x9d, 0xc9, 0xd2, 0x3d, 0x9d, 0x07, 0x36, 0xb7, 0xe2, 0xe2, 0x04, 0xc2,
	0x3a, 0x55, 0x12, 0xd9, 0x71, 0x13, 0x38, 0xc4, 0xd3, 0xae, 0x07, 0xd1, 0xdd, 0x7a, 0xc0, 0xda,
	0x9a, 0x63, 0x18, 0x19, 0xa1, 0x23, 0x91, 0xba, 0xbb, 0x9d, 0xf8, 0xe0, 0x21, 0x5f, 0x70, 0x97,
	0x14, 0x4d, 0x81, 0xf3, 0x01, 0x3c, 0xf4, 0xdf, 0xdc, 0x41, 0x63, 0x2e, 0x8e, 0x6a, 0xc4, 0x76,
	0x4d, 0x06, 0x07, 0x6e, 0x54, 0xcc, 0x3f, 0x5b, 0x8f, 0xdf, 0xc0, 0x0c, 0x6f, 0xde, 0x4a, 0x83,
	0x82, 0x67, 0x59, 0x62, 0x92, 0x72, 0x47, 0xa2, 0x0f, 0xc3, 0x43, 0x87, 0x5f, 0xd6, 0x70, 0xb3,
	0x22, 0xb0, 0xb7, 0x22, 0x88, 0x45, 0x2a, 0xbe, 0xf5, 0x2a, 0x53, 0x6c, 0x17, 0x24, 0xd6, 0xe2,
	0xda, 0x90, 0xba, 0x41, 0xe8, 0x12, 0xb6, 0x00, 0x28, 0xb4, 0xf4, 0xaf, 0x82, 0x4f, 0x88, 0xda,
	0x43, 0x1e, 0x99, 0x3a, 0x7d, 0x6c, 0x2a, 0xee, 0x57, 0x51, 0x45, 0x29, 0xce, 0xe1, 0x0a, 0x0e,
	0xdd, 0x7e, 0x35, 0x18, 0x96, 0xbc, 0x82, 0xbe, 0xa8, 0xcc, 0x4e, 0x69, 0x3e, 0x7b, 0xc2, 0x56,
	0xcf, 0xe1, 0x8e, 0xf5, 0x9d, 0x13, 0xfc, 0xd9, 0xb2, 0x83, 0x55, 0x93, 0xba, 0x8a, 0xde, 0x56,
	0xe8, 0xc9, 0x8b, 0xf9, 0xfd, 0xaf, 0xc5, 0xc1, 0xfd, 0xc3, 0xa2, 0xf5, 0x1d, 0xbf, 0x9f, 0xf8,
	0x7d, 0xfb, 0xbd, 0x38, 0x88, 0xfa, 0xf4, 0x14, 0x3f, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x2d,
	0x7a, 0xd1, 0x64, 0xde, 0x03, 0x00, 0x00,
}
