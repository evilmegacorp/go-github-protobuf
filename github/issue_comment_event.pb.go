// Code generated by protoc-gen-gogo.
// source: issue_comment_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IssueCommentEvent struct {
	Action     string      `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Issue      *Issue      `protobuf:"bytes,2,opt,name=issue" json:"issue,omitempty"`
	Comment    *Comment    `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Repository *Repository `protobuf:"bytes,4,opt,name=repository" json:"repository,omitempty"`
	Sender     *User       `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
}

func (m *IssueCommentEvent) Reset()         { *m = IssueCommentEvent{} }
func (m *IssueCommentEvent) String() string { return proto.CompactTextString(m) }
func (*IssueCommentEvent) ProtoMessage()    {}
func (*IssueCommentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorIssueCommentEvent, []int{0}
}

func init() {
	proto.RegisterType((*IssueCommentEvent)(nil), "github.IssueCommentEvent")
}
func (m *IssueCommentEvent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IssueCommentEvent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintIssueCommentEvent(data, i, uint64(len(m.Action)))
		i += copy(data[i:], m.Action)
	}
	if m.Issue != nil {
		data[i] = 0x12
		i++
		i = encodeVarintIssueCommentEvent(data, i, uint64(m.Issue.Size()))
		n1, err := m.Issue.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Comment != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintIssueCommentEvent(data, i, uint64(m.Comment.Size()))
		n2, err := m.Comment.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Repository != nil {
		data[i] = 0x22
		i++
		i = encodeVarintIssueCommentEvent(data, i, uint64(m.Repository.Size()))
		n3, err := m.Repository.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Sender != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintIssueCommentEvent(data, i, uint64(m.Sender.Size()))
		n4, err := m.Sender.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64IssueCommentEvent(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32IssueCommentEvent(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIssueCommentEvent(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *IssueCommentEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovIssueCommentEvent(uint64(l))
	}
	if m.Issue != nil {
		l = m.Issue.Size()
		n += 1 + l + sovIssueCommentEvent(uint64(l))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovIssueCommentEvent(uint64(l))
	}
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovIssueCommentEvent(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovIssueCommentEvent(uint64(l))
	}
	return n
}

func sovIssueCommentEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIssueCommentEvent(x uint64) (n int) {
	return sovIssueCommentEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IssueCommentEvent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssueCommentEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueCommentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueCommentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssueCommentEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssueCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issue == nil {
				m.Issue = &Issue{}
			}
			if err := m.Issue.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssueCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssueCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &Repository{}
			}
			if err := m.Repository.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssueCommentEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssueCommentEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssueCommentEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssueCommentEvent(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssueCommentEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssueCommentEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIssueCommentEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIssueCommentEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIssueCommentEvent(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIssueCommentEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssueCommentEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("issue_comment_event.proto", fileDescriptorIssueCommentEvent) }

var fileDescriptorIssueCommentEvent = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x2c, 0x2e, 0x2e,
	0x4d, 0x8d, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcd, 0x2b, 0x89, 0x4f, 0x2d, 0x03, 0x92, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x52, 0xba, 0x10, 0x5a,
	0x0f, 0xa8, 0x46, 0x3f, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f, 0x2c, 0x9d, 0x54, 0x9a, 0x06, 0xe6, 0x81,
	0x39, 0x60, 0x16, 0x44, 0x9b, 0x14, 0x57, 0x69, 0x71, 0x6a, 0x11, 0x94, 0xcd, 0x0d, 0x36, 0x1d,
	0xca, 0xe1, 0x85, 0x5a, 0x02, 0xe5, 0x0a, 0x14, 0xa5, 0x16, 0xe4, 0x17, 0x67, 0x96, 0xe4, 0x17,
	0x55, 0x42, 0x44, 0x94, 0xae, 0x32, 0x72, 0x09, 0x7a, 0x82, 0x34, 0x38, 0x43, 0x14, 0xba, 0x82,
	0x1c, 0x23, 0x24, 0xc6, 0xc5, 0x96, 0x98, 0x5c, 0x92, 0x99, 0x9f, 0x27, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x19, 0x04, 0xe5, 0x09, 0x29, 0x73, 0xb1, 0x82, 0x4d, 0x97, 0x60, 0x02, 0x0a, 0x73, 0x1b,
	0xf1, 0xea, 0x41, 0x9d, 0x09, 0x36, 0x21, 0x08, 0x22, 0x27, 0xa4, 0xc9, 0xc5, 0x0e, 0xb5, 0x55,
	0x82, 0x19, 0xac, 0x8c, 0x1f, 0xa6, 0x0c, 0x6a, 0x47, 0x10, 0x4c, 0x5e, 0xc8, 0x88, 0x8b, 0x0b,
	0xe1, 0x22, 0x09, 0x16, 0xb0, 0x6a, 0x21, 0x98, 0xea, 0x20, 0xb8, 0x4c, 0x10, 0x92, 0x2a, 0x21,
	0x15, 0x2e, 0xb6, 0xe2, 0xd4, 0xbc, 0x94, 0xd4, 0x22, 0x09, 0x56, 0xb0, 0x7a, 0x1e, 0x98, 0xfa,
	0x50, 0x60, 0x18, 0x04, 0x41, 0xe5, 0x9c, 0x44, 0x4e, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e,
	0xf1, 0x02, 0x10, 0x3f, 0x00, 0xe2, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x9e, 0x36, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x26, 0x5f, 0xe9, 0x82, 0x01, 0x00, 0x00,
}
