// Code generated by protoc-gen-go.
// source: push_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PushCommit struct {
	Sha       string      `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	TreeId    string      `protobuf:"bytes,2,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	Distinct  bool        `protobuf:"varint,3,opt,name=distinct" json:"distinct,omitempty"`
	Message   string      `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Timestamp string      `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Url       string      `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	Author    *CommitUser `protobuf:"bytes,7,opt,name=author" json:"author,omitempty"`
	Committer *CommitUser `protobuf:"bytes,8,opt,name=committer" json:"committer,omitempty"`
	Added     []string    `protobuf:"bytes,9,rep,name=added" json:"added,omitempty"`
	Removed   []string    `protobuf:"bytes,10,rep,name=removed" json:"removed,omitempty"`
	Modified  []string    `protobuf:"bytes,11,rep,name=modified" json:"modified,omitempty"`
}

func (m *PushCommit) Reset()                    { *m = PushCommit{} }
func (m *PushCommit) String() string            { return proto.CompactTextString(m) }
func (*PushCommit) ProtoMessage()               {}
func (*PushCommit) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{0} }

func (m *PushCommit) GetAuthor() *CommitUser {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PushCommit) GetCommitter() *CommitUser {
	if m != nil {
		return m.Committer
	}
	return nil
}

type PushEvent struct {
	Ref        string        `protobuf:"bytes,1,opt,name=ref" json:"ref,omitempty"`
	Before     string        `protobuf:"bytes,2,opt,name=before" json:"before,omitempty"`
	After      string        `protobuf:"bytes,3,opt,name=after" json:"after,omitempty"`
	Created    bool          `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Deleted    bool          `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	Forced     bool          `protobuf:"varint,6,opt,name=forced" json:"forced,omitempty"`
	BaseRef    string        `protobuf:"bytes,7,opt,name=base_ref,json=baseRef" json:"base_ref,omitempty"`
	Compare    string        `protobuf:"bytes,8,opt,name=compare" json:"compare,omitempty"`
	Commits    []*PushCommit `protobuf:"bytes,9,rep,name=commits" json:"commits,omitempty"`
	HeadCommit *PushCommit   `protobuf:"bytes,10,opt,name=head_commit,json=headCommit" json:"head_commit,omitempty"`
	Repository *Repository   `protobuf:"bytes,11,opt,name=repository" json:"repository,omitempty"`
	Pusher     *CommitUser   `protobuf:"bytes,12,opt,name=pusher" json:"pusher,omitempty"`
	Sender     *User         `protobuf:"bytes,13,opt,name=sender" json:"sender,omitempty"`
}

func (m *PushEvent) Reset()                    { *m = PushEvent{} }
func (m *PushEvent) String() string            { return proto.CompactTextString(m) }
func (*PushEvent) ProtoMessage()               {}
func (*PushEvent) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{1} }

func (m *PushEvent) GetCommits() []*PushCommit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *PushEvent) GetHeadCommit() *PushCommit {
	if m != nil {
		return m.HeadCommit
	}
	return nil
}

func (m *PushEvent) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *PushEvent) GetPusher() *CommitUser {
	if m != nil {
		return m.Pusher
	}
	return nil
}

func (m *PushEvent) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*PushCommit)(nil), "github.PushCommit")
	proto.RegisterType((*PushEvent)(nil), "github.PushEvent")
}

func init() { proto.RegisterFile("push_event.proto", fileDescriptor27) }

var fileDescriptor27 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x8a, 0xdb, 0x30,
	0x10, 0x26, 0xeb, 0x8d, 0x62, 0x4f, 0xb6, 0x90, 0x8a, 0xd2, 0xaa, 0xa1, 0x87, 0x65, 0xe9, 0xa1,
	0x94, 0x12, 0xca, 0xee, 0x23, 0x94, 0x1e, 0x7a, 0x2b, 0x86, 0x9e, 0x8d, 0x12, 0x4d, 0xd6, 0x82,
	0x75, 0x64, 0x24, 0x39, 0xd0, 0x07, 0xeb, 0x33, 0xf4, 0xb5, 0x3a, 0x23, 0xd9, 0x49, 0x7a, 0xc8,
	0x4d, 0xdf, 0x8f, 0x3c, 0x33, 0x9f, 0xc6, 0xb0, 0xea, 0x87, 0xd0, 0x36, 0x78, 0xc4, 0x43, 0xdc,
	0xf4, 0xde, 0x45, 0x27, 0xc5, 0xb3, 0x8d, 0xed, 0xb0, 0x5d, 0xc3, 0x10, 0xd0, 0x67, 0x6e, 0xfd,
	0x7a, 0xe7, 0xba, 0xce, 0xc6, 0xe6, 0x82, 0x5a, 0x79, 0xec, 0x5d, 0xb0, 0xd1, 0xf9, 0xdf, 0x99,
	0x79, 0xf8, 0x7b, 0x03, 0xf0, 0x93, 0xbe, 0xf6, 0x2d, 0x79, 0xe5, 0x0a, 0x8a, 0xd0, 0x6a, 0x35,
	0xbb, 0x9f, 0x7d, 0xaa, 0x6a, 0x3e, 0xca, 0x77, 0xb0, 0x88, 0x1e, 0xb1, 0xb1, 0x46, 0xdd, 0x24,
	0x56, 0x30, 0xfc, 0x61, 0xe4, 0x1a, 0x4a, 0x63, 0x43, 0xb4, 0x87, 0x5d, 0x54, 0x05, 0x29, 0x65,
	0x7d, 0xc2, 0x52, 0xc1, 0xa2, 0xc3, 0x10, 0xf4, 0x33, 0xaa, 0xdb, 0x74, 0x69, 0x82, 0xf2, 0x03,
	0x54, 0xd1, 0x12, 0x88, 0xba, 0xeb, 0xd5, 0x3c, 0x69, 0x67, 0x82, 0xcb, 0x0f, 0xfe, 0x45, 0x89,
	0x5c, 0x9e, 0x8e, 0xf2, 0x33, 0x08, 0x3d, 0xc4, 0xd6, 0x79, 0xb5, 0x20, 0x72, 0xf9, 0x28, 0x37,
	0x79, 0xd2, 0x4d, 0x6e, 0xf8, 0x17, 0xcd, 0x56, 0x8f, 0x0e, 0xf9, 0x15, 0xaa, 0x3c, 0x72, 0x44,
	0xaf, 0xca, 0xab, 0xf6, 0xb3, 0x49, 0xbe, 0x81, 0xb9, 0x36, 0x06, 0x8d, 0xaa, 0xee, 0x0b, 0xaa,
	0x98, 0x01, 0x77, 0xef, 0xb1, 0x73, 0x47, 0xe2, 0x21, 0xf1, 0x13, 0xe4, 0x99, 0x3b, 0x67, 0xec,
	0xde, 0x92, 0xb4, 0x4c, 0xd2, 0x09, 0x3f, 0xfc, 0x29, 0xa0, 0xe2, 0x24, 0xbf, 0xf3, 0xb3, 0xf0,
	0x24, 0x1e, 0xf7, 0x53, 0x90, 0x74, 0x94, 0x6f, 0x41, 0x6c, 0x71, 0xef, 0x3c, 0x4e, 0x39, 0x66,
	0x94, 0x7a, 0xd8, 0x73, 0xc7, 0x45, 0xa2, 0x33, 0xe0, 0x1e, 0x76, 0x1e, 0x75, 0xa4, 0x42, 0xb7,
	0x29, 0xdc, 0x09, 0xb2, 0x62, 0xf0, 0x05, 0x59, 0x99, 0x67, 0x65, 0x84, 0x5c, 0x81, 0xbe, 0xb8,
	0x23, 0x41, 0x24, 0x61, 0x44, 0xf2, 0x3d, 0x94, 0x5b, 0x1d, 0xb0, 0xe1, 0x86, 0x16, 0xf9, 0x39,
	0x18, 0xd7, 0xd4, 0x14, 0x97, 0x71, 0x5d, 0xaf, 0xa9, 0xab, 0x32, 0x2b, 0x23, 0x94, 0x5f, 0x92,
	0x42, 0x39, 0x85, 0x14, 0xce, 0x45, 0x94, 0xe7, 0x75, 0xa9, 0x27, 0x8b, 0x7c, 0x82, 0x65, 0x8b,
	0xda, 0x34, 0x19, 0x53, 0x6c, 0xb3, 0x2b, 0x37, 0x80, 0x6d, 0xe3, 0xb2, 0x3d, 0x02, 0x9c, 0xf7,
	0x91, 0xf2, 0xfc, 0xef, 0x4e, 0x7d, 0x52, 0xea, 0x0b, 0x17, 0xef, 0x03, 0x2f, 0x3f, 0xc5, 0x75,
	0x77, 0x7d, 0x1f, 0xb2, 0x43, 0x7e, 0x04, 0x11, 0xf0, 0x60, 0xc8, 0xfb, 0x2a, 0x79, 0xef, 0x26,
	0x6f, 0x76, 0x65, 0x6d, 0x2b, 0xd2, 0x8f, 0xf0, 0xf4, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x2d,
	0x2b, 0xfb, 0x55, 0x03, 0x00, 0x00,
}
