// Code generated by protoc-gen-gogo.
// source: integration_installation_repositories.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InstallationRepo struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FullName string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (m *InstallationRepo) Reset()         { *m = InstallationRepo{} }
func (m *InstallationRepo) String() string { return proto.CompactTextString(m) }
func (*InstallationRepo) ProtoMessage()    {}
func (*InstallationRepo) Descriptor() ([]byte, []int) {
	return fileDescriptorIntegrationInstallationRepositories, []int{0}
}

type IntegrationInstallationRepositories struct {
	Action              string              `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Installation        *Installation       `protobuf:"bytes,2,opt,name=installation" json:"installation,omitempty"`
	RepositorySelection string              `protobuf:"bytes,3,opt,name=repository_selection,json=repositorySelection,proto3" json:"repository_selection,omitempty"`
	RepositoriesAdded   []*InstallationRepo `protobuf:"bytes,4,rep,name=repositories_added,json=repositoriesAdded" json:"repositories_added,omitempty"`
	RepositoriesRemoved []*InstallationRepo `protobuf:"bytes,5,rep,name=repositories_removed,json=repositoriesRemoved" json:"repositories_removed,omitempty"`
	Sender              *User               `protobuf:"bytes,6,opt,name=sender" json:"sender,omitempty"`
}

func (m *IntegrationInstallationRepositories) Reset()         { *m = IntegrationInstallationRepositories{} }
func (m *IntegrationInstallationRepositories) String() string { return proto.CompactTextString(m) }
func (*IntegrationInstallationRepositories) ProtoMessage()    {}
func (*IntegrationInstallationRepositories) Descriptor() ([]byte, []int) {
	return fileDescriptorIntegrationInstallationRepositories, []int{1}
}

func init() {
	proto.RegisterType((*InstallationRepo)(nil), "github.InstallationRepo")
	proto.RegisterType((*IntegrationInstallationRepositories)(nil), "github.IntegrationInstallationRepositories")
}
func (m *InstallationRepo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InstallationRepo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.FullName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(len(m.FullName)))
		i += copy(data[i:], m.FullName)
	}
	return i, nil
}

func (m *IntegrationInstallationRepositories) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IntegrationInstallationRepositories) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(len(m.Action)))
		i += copy(data[i:], m.Action)
	}
	if m.Installation != nil {
		data[i] = 0x12
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(m.Installation.Size()))
		n1, err := m.Installation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.RepositorySelection) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(len(m.RepositorySelection)))
		i += copy(data[i:], m.RepositorySelection)
	}
	if len(m.RepositoriesAdded) > 0 {
		for _, msg := range m.RepositoriesAdded {
			data[i] = 0x22
			i++
			i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepositoriesRemoved) > 0 {
		for _, msg := range m.RepositoriesRemoved {
			data[i] = 0x2a
			i++
			i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Sender != nil {
		data[i] = 0x32
		i++
		i = encodeVarintIntegrationInstallationRepositories(data, i, uint64(m.Sender.Size()))
		n2, err := m.Sender.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64IntegrationInstallationRepositories(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32IntegrationInstallationRepositories(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIntegrationInstallationRepositories(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *InstallationRepo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIntegrationInstallationRepositories(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
	}
	return n
}

func (m *IntegrationInstallationRepositories) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
	}
	if m.Installation != nil {
		l = m.Installation.Size()
		n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
	}
	l = len(m.RepositorySelection)
	if l > 0 {
		n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
	}
	if len(m.RepositoriesAdded) > 0 {
		for _, e := range m.RepositoriesAdded {
			l = e.Size()
			n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
		}
	}
	if len(m.RepositoriesRemoved) > 0 {
		for _, e := range m.RepositoriesRemoved {
			l = e.Size()
			n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
		}
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovIntegrationInstallationRepositories(uint64(l))
	}
	return n
}

func sovIntegrationInstallationRepositories(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIntegrationInstallationRepositories(x uint64) (n int) {
	return sovIntegrationInstallationRepositories(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InstallationRepo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrationInstallationRepositories
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallationRepo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallationRepo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrationInstallationRepositories(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegrationInstallationRepositories) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrationInstallationRepositories
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegrationInstallationRepositories: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegrationInstallationRepositories: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Installation == nil {
				m.Installation = &Installation{}
			}
			if err := m.Installation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositorySelection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositorySelection = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoriesAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoriesAdded = append(m.RepositoriesAdded, &InstallationRepo{})
			if err := m.RepositoriesAdded[len(m.RepositoriesAdded)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoriesRemoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoriesRemoved = append(m.RepositoriesRemoved, &InstallationRepo{})
			if err := m.RepositoriesRemoved[len(m.RepositoriesRemoved)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrationInstallationRepositories(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrationInstallationRepositories
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIntegrationInstallationRepositories(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIntegrationInstallationRepositories
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntegrationInstallationRepositories
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIntegrationInstallationRepositories
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIntegrationInstallationRepositories
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIntegrationInstallationRepositories(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIntegrationInstallationRepositories = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIntegrationInstallationRepositories   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("integration_installation_repositories.proto", fileDescriptorIntegrationInstallationRepositories)
}

var fileDescriptorIntegrationInstallationRepositories = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x51, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0xed, 0xef, 0xf0, 0xf5, 0x7e, 0x45, 0xf4, 0xb6, 0xc8, 0x50, 0xa1, 0x94, 0xea, 0x42, 0x10,
	0x5b, 0xd4, 0x8d, 0x5b, 0xdd, 0x48, 0x11, 0x5c, 0xa4, 0xb8, 0x1e, 0xa6, 0x9d, 0x74, 0x0c, 0x4c,
	0x27, 0x25, 0xc9, 0x08, 0xbe, 0x89, 0x8f, 0xd4, 0xa5, 0x8f, 0xe0, 0x0f, 0xf8, 0x1c, 0x66, 0x92,
	0x19, 0x9b, 0x8a, 0xe0, 0x22, 0xe4, 0xde, 0x73, 0x72, 0xce, 0xc9, 0x4d, 0xe0, 0x84, 0xa5, 0x8a,
	0xc6, 0x22, 0x54, 0x8c, 0xa7, 0x01, 0x4b, 0xa5, 0x0a, 0x93, 0xc4, 0x36, 0x82, 0xae, 0xb8, 0x64,
	0x8a, 0x0b, 0x46, 0xe5, 0x68, 0x25, 0xb8, 0xe2, 0xe8, 0xc5, 0x4c, 0x3d, 0x64, 0xb3, 0xde, 0xa9,
	0xdd, 0x47, 0x73, 0xbe, 0x1c, 0xc7, 0x3c, 0xe6, 0x63, 0x43, 0xcf, 0xb2, 0x85, 0xe9, 0x4c, 0x63,
	0x2a, 0x2b, 0xeb, 0x41, 0x26, 0xa9, 0x28, 0x6a, 0x74, 0x33, 0x2c, 0x36, 0x9c, 0xc2, 0xee, 0xc4,
	0x41, 0x89, 0x0e, 0xc6, 0x1d, 0xa8, 0xb1, 0xc8, 0xaf, 0x0e, 0xaa, 0xc7, 0x4d, 0xa2, 0x2b, 0x44,
	0x68, 0xa4, 0xe1, 0x92, 0xfa, 0x35, 0x8d, 0xb4, 0x88, 0xa9, 0xf1, 0x00, 0x5a, 0x8b, 0x2c, 0x49,
	0x02, 0x43, 0xd4, 0x0d, 0xf1, 0x2f, 0x07, 0xee, 0x74, 0x3f, 0xfc, 0xac, 0xc1, 0xe1, 0x64, 0x33,
	0xdb, 0xcf, 0x80, 0x72, 0x32, 0xdc, 0x07, 0x2f, 0x9c, 0xe7, 0xa8, 0x09, 0x6b, 0x91, 0xa2, 0xc3,
	0x4b, 0x68, 0xbb, 0x57, 0x35, 0xc1, 0xff, 0xcf, 0xbb, 0xa3, 0x62, 0xf4, 0x2d, 0xbf, 0xad, 0x93,
	0x78, 0x06, 0xdd, 0xef, 0xb7, 0x7b, 0x0a, 0x24, 0x4d, 0xa8, 0xf5, 0xb7, 0x37, 0xec, 0x6c, 0xb8,
	0x69, 0x49, 0xe1, 0x0d, 0xa0, 0xfb, 0xdc, 0x41, 0x18, 0x45, 0x34, 0xf2, 0x1b, 0x83, 0xba, 0x8e,
	0xf4, 0x7f, 0x8d, 0xd4, 0xa7, 0xc9, 0x9e, 0xab, 0xb9, 0xca, 0x25, 0x78, 0xeb, 0x64, 0xe7, 0x46,
	0x82, 0x2e, 0xf9, 0xa3, 0xb6, 0x6a, 0xfe, 0x61, 0xd5, 0x71, 0x55, 0xc4, 0x8a, 0xf0, 0x08, 0x3c,
	0x49, 0xd3, 0x88, 0x0a, 0xdf, 0x33, 0xc3, 0xb7, 0x4b, 0xf9, 0xbd, 0xfe, 0x4f, 0x52, 0x70, 0xd7,
	0xdd, 0xf5, 0x5b, 0xbf, 0xb2, 0x7e, 0xef, 0x57, 0x5f, 0xf4, 0x7a, 0xd5, 0xeb, 0xf9, 0xa3, 0x5f,
	0x99, 0x79, 0xe6, 0x6b, 0x2f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x25, 0xd6, 0xa9, 0x36, 0x60,
	0x02, 0x00, 0x00,
}
