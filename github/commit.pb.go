// Code generated by protoc-gen-go.
// source: commit.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommitDetailTree struct {
	Sha string `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *CommitDetailTree) Reset()                    { *m = CommitDetailTree{} }
func (m *CommitDetailTree) String() string            { return proto.CompactTextString(m) }
func (*CommitDetailTree) ProtoMessage()               {}
func (*CommitDetailTree) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CommitLanguage struct {
	AceMode     string `protobuf:"bytes,1,opt,name=ace_mode,json=aceMode" json:"ace_mode,omitempty"`
	Group       string `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	IsPopular   bool   `protobuf:"varint,3,opt,name=is_popular,json=isPopular" json:"is_popular,omitempty"`
	IsUnpopular bool   `protobuf:"varint,4,opt,name=is_unpopular,json=isUnpopular" json:"is_unpopular,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
}

func (m *CommitLanguage) Reset()                    { *m = CommitLanguage{} }
func (m *CommitLanguage) String() string            { return proto.CompactTextString(m) }
func (*CommitLanguage) ProtoMessage()               {}
func (*CommitLanguage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type CommitLinguist struct {
	ContentType            string          `protobuf:"bytes,1,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Disposition            string          `protobuf:"bytes,2,opt,name=disposition" json:"disposition,omitempty"`
	Extname                string          `protobuf:"bytes,3,opt,name=extname" json:"extname,omitempty"`
	IsBinary               bool            `protobuf:"varint,4,opt,name=is_binary,json=isBinary" json:"is_binary,omitempty"`
	IsDocumentation        bool            `protobuf:"varint,5,opt,name=is_documentation,json=isDocumentation" json:"is_documentation,omitempty"`
	IsGenerated            bool            `protobuf:"varint,6,opt,name=is_generated,json=isGenerated" json:"is_generated,omitempty"`
	IsHighRatioOfLongLines bool            `protobuf:"varint,7,opt,name=is_high_ratio_of_long_lines,json=isHighRatioOfLongLines" json:"is_high_ratio_of_long_lines,omitempty"`
	IsImage                bool            `protobuf:"varint,8,opt,name=is_image,json=isImage" json:"is_image,omitempty"`
	IsLarge                bool            `protobuf:"varint,9,opt,name=is_large,json=isLarge" json:"is_large,omitempty"`
	IsSafeToColorize       bool            `protobuf:"varint,10,opt,name=is_safe_to_colorize,json=isSafeToColorize" json:"is_safe_to_colorize,omitempty"`
	IsText                 bool            `protobuf:"varint,11,opt,name=is_text,json=isText" json:"is_text,omitempty"`
	IsVendored             bool            `protobuf:"varint,12,opt,name=is_vendored,json=isVendored" json:"is_vendored,omitempty"`
	IsViewable             bool            `protobuf:"varint,13,opt,name=is_viewable,json=isViewable" json:"is_viewable,omitempty"`
	Loc                    int32           `protobuf:"varint,14,opt,name=loc" json:"loc,omitempty"`
	Sloc                   int32           `protobuf:"varint,15,opt,name=sloc" json:"sloc,omitempty"`
	Type                   string          `protobuf:"bytes,16,opt,name=type" json:"type,omitempty"`
	Language               *CommitLanguage `protobuf:"bytes,17,opt,name=language" json:"language,omitempty"`
}

func (m *CommitLinguist) Reset()                    { *m = CommitLinguist{} }
func (m *CommitLinguist) String() string            { return proto.CompactTextString(m) }
func (*CommitLinguist) ProtoMessage()               {}
func (*CommitLinguist) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CommitLinguist) GetLanguage() *CommitLanguage {
	if m != nil {
		return m.Language
	}
	return nil
}

type CommitFramework struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CommitFramework) Reset()                    { *m = CommitFramework{} }
func (m *CommitFramework) String() string            { return proto.CompactTextString(m) }
func (*CommitFramework) ProtoMessage()               {}
func (*CommitFramework) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type CommitLicense struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	OsiApproved bool   `protobuf:"varint,4,opt,name=osiApproved" json:"osiApproved,omitempty"`
	Proprietary string `protobuf:"bytes,5,opt,name=proprietary" json:"proprietary,omitempty"`
}

func (m *CommitLicense) Reset()                    { *m = CommitLicense{} }
func (m *CommitLicense) String() string            { return proto.CompactTextString(m) }
func (*CommitLicense) ProtoMessage()               {}
func (*CommitLicense) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type CommitFileDetail struct {
	Id         string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Commit     string                    `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Author     *User                     `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Committer  *User                     `protobuf:"bytes,4,opt,name=committer" json:"committer,omitempty"`
	Binary     bool                      `protobuf:"varint,5,opt,name=binary" json:"binary,omitempty"`
	Body       string                    `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
	Patch      string                    `protobuf:"bytes,7,opt,name=patch" json:"patch,omitempty"`
	Filename   string                    `protobuf:"bytes,8,opt,name=filename" json:"filename,omitempty"`
	Language   string                    `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	Mimetype   string                    `protobuf:"bytes,10,opt,name=mimetype" json:"mimetype,omitempty"`
	Status     string                    `protobuf:"bytes,11,opt,name=status" json:"status,omitempty"`
	Size       int32                     `protobuf:"varint,12,opt,name=size" json:"size,omitempty"`
	Additions  int32                     `protobuf:"varint,13,opt,name=additions" json:"additions,omitempty"`
	Deletions  int32                     `protobuf:"varint,14,opt,name=deletions" json:"deletions,omitempty"`
	Licenses   map[string]*CommitLicense `protobuf:"bytes,15,rep,name=licenses" json:"licenses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Frameworks []*CommitFramework        `protobuf:"bytes,16,rep,name=frameworks" json:"frameworks,omitempty"`
	Linguist   *CommitLinguist           `protobuf:"bytes,17,opt,name=linguist" json:"linguist,omitempty"`
}

func (m *CommitFileDetail) Reset()                    { *m = CommitFileDetail{} }
func (m *CommitFileDetail) String() string            { return proto.CompactTextString(m) }
func (*CommitFileDetail) ProtoMessage()               {}
func (*CommitFileDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CommitFileDetail) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CommitFileDetail) GetCommitter() *User {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *CommitFileDetail) GetLicenses() map[string]*CommitLicense {
	if m != nil {
		return m.Licenses
	}
	return nil
}

func (m *CommitFileDetail) GetFrameworks() []*CommitFramework {
	if m != nil {
		return m.Frameworks
	}
	return nil
}

func (m *CommitFileDetail) GetLinguist() *CommitLinguist {
	if m != nil {
		return m.Linguist
	}
	return nil
}

type CommitDetail struct {
	Author       *CommitUser       `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Committer    *CommitUser       `protobuf:"bytes,2,opt,name=committer" json:"committer,omitempty"`
	CommentCount int32             `protobuf:"varint,3,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
	Message      string            `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Tree         *CommitDetailTree `protobuf:"bytes,5,opt,name=tree" json:"tree,omitempty"`
	Url          string            `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
}

func (m *CommitDetail) Reset()                    { *m = CommitDetail{} }
func (m *CommitDetail) String() string            { return proto.CompactTextString(m) }
func (*CommitDetail) ProtoMessage()               {}
func (*CommitDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CommitDetail) GetAuthor() *CommitUser {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CommitDetail) GetCommitter() *CommitUser {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *CommitDetail) GetTree() *CommitDetailTree {
	if m != nil {
		return m.Tree
	}
	return nil
}

type Commit struct {
	Id        string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Sha       string              `protobuf:"bytes,2,opt,name=sha" json:"sha,omitempty"`
	Author    *User               `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Committer *User               `protobuf:"bytes,4,opt,name=committer" json:"committer,omitempty"`
	Commit    *CommitDetail       `protobuf:"bytes,5,opt,name=commit" json:"commit,omitempty"`
	Files     []*CommitFileDetail `protobuf:"bytes,6,rep,name=files" json:"files,omitempty"`
	Parents   []*CommitDetailTree `protobuf:"bytes,7,rep,name=parents" json:"parents,omitempty"`
	Repo      *Repository         `protobuf:"bytes,8,opt,name=repo" json:"repo,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Commit) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Commit) GetCommitter() *User {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *Commit) GetCommit() *CommitDetail {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *Commit) GetFiles() []*CommitFileDetail {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Commit) GetParents() []*CommitDetailTree {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Commit) GetRepo() *Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitDetailTree)(nil), "github.CommitDetailTree")
	proto.RegisterType((*CommitLanguage)(nil), "github.CommitLanguage")
	proto.RegisterType((*CommitLinguist)(nil), "github.CommitLinguist")
	proto.RegisterType((*CommitFramework)(nil), "github.CommitFramework")
	proto.RegisterType((*CommitLicense)(nil), "github.CommitLicense")
	proto.RegisterType((*CommitFileDetail)(nil), "github.CommitFileDetail")
	proto.RegisterType((*CommitDetail)(nil), "github.CommitDetail")
	proto.RegisterType((*Commit)(nil), "github.Commit")
}

func init() { proto.RegisterFile("commit.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x8e, 0xe3, 0x34,
	0x14, 0x56, 0xdb, 0xe9, 0xdf, 0x69, 0x67, 0xa6, 0x6b, 0x96, 0xd9, 0x30, 0x0b, 0x62, 0x29, 0xb0,
	0xe2, 0x67, 0xa9, 0x50, 0x91, 0x00, 0xc1, 0x15, 0x3b, 0xcb, 0x02, 0xd2, 0x20, 0x50, 0x98, 0xe5,
	0x36, 0x4a, 0x1b, 0xb7, 0xb5, 0x36, 0x89, 0xa3, 0xd8, 0x99, 0xa5, 0xbc, 0x01, 0x57, 0x5c, 0xf2,
	0x26, 0xbc, 0x01, 0x4f, 0xc3, 0x4b, 0x70, 0x7c, 0x6c, 0x27, 0xe9, 0x0c, 0xcb, 0x15, 0x77, 0x3e,
	0xdf, 0xf7, 0xd9, 0x39, 0xc7, 0xfe, 0x8e, 0x1d, 0x98, 0xae, 0x65, 0x96, 0x09, 0xbd, 0x28, 0x4a,
	0xa9, 0x25, 0x1b, 0x6c, 0x85, 0xde, 0x55, 0xab, 0x73, 0xa8, 0x14, 0x2f, 0x2d, 0x76, 0x3e, 0x2b,
	0x79, 0x21, 0x95, 0xd0, 0xb2, 0xdc, 0x3b, 0xe4, 0x8e, 0x9d, 0x13, 0x35, 0xa2, 0xf9, 0xa7, 0x30,
	0xbb, 0x20, 0xf0, 0x09, 0xd7, 0xb1, 0x48, 0xaf, 0x4a, 0xce, 0xd9, 0x0c, 0x7a, 0x6a, 0x17, 0x07,
	0x9d, 0x07, 0x9d, 0xf7, 0xc6, 0xa1, 0x19, 0x1a, 0xa4, 0x2a, 0xd3, 0xa0, 0x6b, 0x11, 0x1c, 0xce,
	0xff, 0xe8, 0xc0, 0x89, 0x9d, 0x78, 0x19, 0xe7, 0xdb, 0x2a, 0xde, 0x72, 0xf6, 0x1a, 0x8c, 0xe2,
	0x35, 0x8f, 0x32, 0x99, 0x70, 0x37, 0x77, 0x88, 0xf1, 0xf7, 0x18, 0xb2, 0xbb, 0xd0, 0xdf, 0x96,
	0xb2, 0x2a, 0xdc, 0x0a, 0x36, 0x60, 0x6f, 0x00, 0x08, 0x15, 0x15, 0xb2, 0xa8, 0xd2, 0xb8, 0x0c,
	0x7a, 0x48, 0x8d, 0xc2, 0xb1, 0x50, 0x3f, 0x5a, 0x80, 0xbd, 0x05, 0x53, 0xa4, 0xab, 0xdc, 0x0b,
	0x8e, 0x48, 0x30, 0x11, 0xea, 0x99, 0x87, 0x18, 0x83, 0x23, 0xbd, 0x2f, 0x78, 0xd0, 0xa7, 0x65,
	0x69, 0x3c, 0xff, 0xeb, 0xa8, 0xce, 0x4c, 0x60, 0x66, 0x42, 0x69, 0xb3, 0xd2, 0x5a, 0xe6, 0x9a,
	0xe7, 0x3a, 0x22, 0xb9, 0xcd, 0x6e, 0xe2, 0xb0, 0x2b, 0x84, 0xd8, 0x03, 0x98, 0x24, 0x42, 0xd1,
	0x7e, 0x09, 0x99, 0xbb, 0x3c, 0xdb, 0x10, 0x0b, 0x60, 0xc8, 0x7f, 0xd1, 0x79, 0x9c, 0x71, 0x4a,
	0x15, 0xab, 0x73, 0x21, 0xbb, 0x0f, 0x98, 0x75, 0xb4, 0x12, 0x79, 0x5c, 0xee, 0x5d, 0x96, 0x23,
	0xa1, 0x1e, 0x53, 0xcc, 0xde, 0x87, 0x19, 0x92, 0x89, 0x5c, 0x57, 0x19, 0x7e, 0x2b, 0xa6, 0xd5,
	0xfb, 0xa4, 0x39, 0x15, 0xea, 0x49, 0x1b, 0x76, 0x05, 0x6f, 0x79, 0xce, 0xcb, 0x58, 0xf3, 0x24,
	0x18, 0xf8, 0x82, 0xbf, 0xf1, 0x10, 0xfb, 0x12, 0xee, 0xa3, 0x64, 0x27, 0xb6, 0xbb, 0xa8, 0x34,
	0x93, 0x22, 0xb9, 0x89, 0x52, 0x99, 0x6f, 0xa3, 0x54, 0xe4, 0x5c, 0x05, 0x43, 0x9a, 0x71, 0x26,
	0xd4, 0xb7, 0xa8, 0x08, 0x8d, 0xe0, 0x87, 0xcd, 0x25, 0xd2, 0x97, 0x86, 0x35, 0x07, 0x84, 0x93,
	0x45, 0x86, 0x87, 0x15, 0x8c, 0x48, 0x39, 0x14, 0xea, 0xbb, 0xcc, 0x9d, 0x1d, 0x52, 0xb8, 0xa5,
	0x48, 0x8d, 0x3d, 0x75, 0x69, 0x42, 0xf6, 0x11, 0xbc, 0x82, 0x94, 0x8a, 0x37, 0x3c, 0xd2, 0x32,
	0x5a, 0xcb, 0x54, 0x96, 0xe2, 0x57, 0x1e, 0x00, 0xa9, 0xb0, 0xb6, 0x9f, 0x90, 0xb9, 0x92, 0x17,
	0x0e, 0x67, 0xf7, 0x00, 0x67, 0x46, 0x1a, 0xf7, 0x26, 0x98, 0x90, 0x64, 0x20, 0xd4, 0x15, 0x46,
	0xec, 0x4d, 0xc0, 0x4a, 0xa2, 0x6b, 0x9e, 0x27, 0xb2, 0xc4, 0xe2, 0xa6, 0x44, 0xa2, 0x01, 0x7e,
	0x76, 0x88, 0x17, 0x08, 0xfe, 0x22, 0x5e, 0xa5, 0x3c, 0x38, 0xae, 0x05, 0x0e, 0x31, 0x2e, 0x4c,
	0xe5, 0x3a, 0x38, 0x41, 0xa2, 0x1f, 0x9a, 0xa1, 0x39, 0x7f, 0x65, 0xa0, 0x53, 0x82, 0x68, 0x5c,
	0x7b, 0x62, 0xd6, 0x78, 0x82, 0x2d, 0x61, 0x94, 0x3a, 0x9b, 0x06, 0x77, 0x10, 0x9f, 0x2c, 0xcf,
	0x16, 0xb6, 0x63, 0x16, 0x87, 0x26, 0x0e, 0x6b, 0xdd, 0xfc, 0x5d, 0x38, 0xb5, 0xdc, 0xd3, 0x12,
	0x0f, 0xf9, 0x85, 0x2c, 0x9f, 0x9b, 0xa5, 0xe9, 0xfc, 0xad, 0x7f, 0x68, 0x3c, 0xff, 0xad, 0x03,
	0xc7, 0xde, 0x6e, 0x6b, 0x9e, 0x2b, 0xce, 0x4e, 0xa0, 0x2b, 0x12, 0xa7, 0xc1, 0x51, 0x3d, 0xab,
	0xdb, 0xcc, 0xf2, 0x0d, 0xd5, 0xab, 0x1b, 0xca, 0x18, 0x10, 0x9d, 0xf6, 0x55, 0x81, 0x6d, 0x79,
	0x8d, 0xdb, 0xe3, 0xcc, 0xde, 0x82, 0x8c, 0x02, 0x47, 0x45, 0x29, 0xb0, 0x53, 0xd1, 0x68, 0xd6,
	0xf3, 0x6d, 0x68, 0xfe, 0x7b, 0xdf, 0x77, 0xf3, 0x53, 0x91, 0x72, 0xdb, 0xd1, 0xb7, 0xd2, 0x39,
	0x83, 0x81, 0xbd, 0x06, 0x5c, 0x42, 0x2e, 0x62, 0xef, 0xc0, 0x20, 0xae, 0xf4, 0x4e, 0xda, 0x4e,
	0x9c, 0x2c, 0xa7, 0x7e, 0x87, 0x9e, 0xe1, 0x6d, 0x11, 0x3a, 0x8e, 0x7d, 0x00, 0x63, 0xab, 0xd7,
	0xdc, 0x76, 0xe4, 0x4d, 0x61, 0x43, 0x9b, 0x2f, 0xb9, 0xa6, 0xb0, 0x86, 0x77, 0x91, 0xd9, 0x90,
	0x95, 0x4c, 0xf6, 0xe4, 0x6f, 0xdc, 0x10, 0x33, 0x36, 0x37, 0x44, 0x11, 0xeb, 0xf5, 0x8e, 0x2c,
	0x8c, 0x37, 0x04, 0x05, 0xec, 0x1c, 0x46, 0x1b, 0xac, 0x84, 0xb6, 0x6f, 0x44, 0x44, 0x1d, 0x1b,
	0xae, 0x3e, 0xd3, 0xb1, 0xe5, 0x7c, 0x6c, 0xb8, 0x4c, 0x64, 0x9c, 0x7c, 0x00, 0x96, 0xf3, 0xb1,
	0xc9, 0x4a, 0x61, 0xc3, 0x55, 0x8a, 0xfc, 0x89, 0xf5, 0xdb, 0x88, 0xbc, 0x64, 0x8c, 0x3d, 0x75,
	0x5e, 0x32, 0x66, 0x7e, 0x1d, 0xc6, 0x71, 0x92, 0x50, 0xff, 0x2b, 0x32, 0x64, 0x3f, 0x6c, 0x00,
	0xc3, 0x26, 0x3c, 0xe5, 0x96, 0xb5, 0xae, 0x6c, 0x00, 0xf6, 0x18, 0xf3, 0xb3, 0x8e, 0x50, 0xe8,
	0xcf, 0x1e, 0x6e, 0xd4, 0xc3, 0x43, 0xcf, 0x35, 0x67, 0xb4, 0x70, 0xd6, 0x51, 0x5f, 0xe7, 0xba,
	0xdc, 0x87, 0xf5, 0x3c, 0xf6, 0x19, 0xc0, 0xc6, 0xbb, 0x4f, 0xa1, 0xa3, 0xcd, 0x2a, 0xf7, 0x6e,
	0xac, 0xe2, 0xf9, 0xb0, 0x25, 0x25, 0xc3, 0xbb, 0xdb, 0xef, 0x25, 0x86, 0x77, 0x6c, 0x58, 0xeb,
	0xce, 0x43, 0x38, 0x3e, 0xc8, 0xc3, 0x98, 0xf4, 0x39, 0xdf, 0xfb, 0x77, 0x00, 0x87, 0xec, 0x43,
	0xe8, 0x5f, 0xc7, 0x69, 0x65, 0xbd, 0x3c, 0x59, 0xbe, 0x7a, 0x73, 0x4d, 0x9a, 0x1d, 0x5a, 0xcd,
	0x17, 0xdd, 0xcf, 0x3b, 0xf3, 0xbf, 0x3b, 0x30, 0x6d, 0xbf, 0x2f, 0xe8, 0x1f, 0xef, 0xb2, 0x0e,
	0x2d, 0xc1, 0x0e, 0x97, 0x38, 0xf0, 0xda, 0xc7, 0x6d, 0xaf, 0x75, 0x5f, 0x2a, 0x6f, 0x39, 0xee,
	0x6d, 0x38, 0x36, 0x81, 0xb9, 0xe8, 0xd7, 0xb2, 0xca, 0x35, 0x59, 0xb9, 0x1f, 0x4e, 0x1d, 0x78,
	0x61, 0x30, 0x73, 0x91, 0x67, 0x5c, 0x29, 0xe3, 0x9b, 0x23, 0x7b, 0x91, 0xbb, 0x90, 0x3d, 0xc2,
	0xab, 0x03, 0x1f, 0x40, 0xb2, 0xeb, 0x64, 0x19, 0x1c, 0x7e, 0xab, 0x79, 0x20, 0x43, 0x52, 0xf9,
	0x1e, 0x1e, 0x34, 0x8f, 0xe2, 0x9f, 0x5d, 0x18, 0x58, 0xf1, 0xad, 0xae, 0x73, 0x6f, 0x6a, 0xb7,
	0x79, 0x53, 0xff, 0xff, 0x7e, 0x7b, 0x54, 0x77, 0xb6, 0x2d, 0xe0, 0xee, 0xbf, 0x15, 0x50, 0xf7,
	0xfb, 0x02, 0xfa, 0xa6, 0x97, 0x14, 0x16, 0xd0, 0xbb, 0x5d, 0x6d, 0x63, 0xce, 0xd0, 0xca, 0xd0,
	0x52, 0xc3, 0x22, 0x2e, 0x71, 0x17, 0xcd, 0x33, 0xd3, 0xfb, 0xcf, 0xfd, 0xf1, 0x42, 0xf6, 0x10,
	0x8e, 0xcc, 0x4f, 0x08, 0xf5, 0x6e, 0xeb, 0xf0, 0xc2, 0xfa, 0xc7, 0x24, 0x24, 0x7e, 0x35, 0xa0,
	0x9f, 0x91, 0x4f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x19, 0x67, 0xda, 0xd5, 0x08, 0x00,
	0x00,
}
